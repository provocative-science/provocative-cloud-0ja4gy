name: Deploy to Production

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string
      force_deploy:
        description: 'Force deployment bypassing waiting period'
        required: false
        type: boolean
        default: false

# Ensure only one production deployment runs at a time
concurrency:
  group: production
  cancel-in-progress: false

env:
  ENVIRONMENT: production
  AWS_REGION: us-west-2
  DOCKER_REGISTRY: docker-registry/provocative-cloud
  DEPLOYMENT_TIMEOUT: 1800
  ROLLBACK_ENABLED: true

permissions:
  contents: read
  deployments: write
  packages: read
  pull-requests: read
  id-token: write
  security-events: write

jobs:
  validate_deployment:
    name: Validate Deployment Prerequisites
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://provocative.cloud
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify CI workflow status
        run: |
          gh workflow view backend-ci --json conclusion --jq '.conclusion'
          gh workflow view frontend-ci --json conclusion --jq '.conclusion'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate security scan results
        run: |
          if [[ -f ".github/workflows/backend-ci/security_scan.json" ]]; then
            jq -e '.high_severity_count == 0' .github/workflows/backend-ci/security_scan.json
          fi
          if [[ -f ".github/workflows/frontend-ci/security_scan.json" ]]; then
            jq -e '.high_severity_count == 0' .github/workflows/frontend-ci/security_scan.json
          fi

      - name: Check SSL certificate validity
        run: |
          DOMAIN="provocative.cloud"
          CERT_EXPIRY=$(openssl s_client -connect ${DOMAIN}:443 -servername ${DOMAIN} 2>/dev/null | openssl x509 -noout -enddate)
          if [[ $(date -d "${CERT_EXPIRY#*=}" +%s) -lt $(date -d "+30 days" +%s) ]]; then
            echo "SSL certificate expires soon"
            exit 1
          fi

  deploy_infrastructure:
    name: Deploy Cloud Infrastructure
    needs: validate_deployment
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false

      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="bucket=provocative-terraform-state" \
            -backend-config="key=production/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./infrastructure/terraform

      - name: Validate Terraform configuration
        run: terraform validate
        working-directory: ./infrastructure/terraform

      - name: Plan Terraform changes
        run: |
          terraform plan \
            -var-file="environments/production.tfvars" \
            -out=tfplan
        working-directory: ./infrastructure/terraform

      - name: Apply Terraform changes
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure/terraform
        timeout-minutes: 30

  deploy_applications:
    name: Deploy Applications
    needs: deploy_infrastructure
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name provocative-production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy backend services
        run: |
          kubectl apply -f infrastructure/kubernetes/backend-deployment.yaml
          kubectl rollout status deployment/backend-api -n provocative-cloud --timeout=30m

      - name: Verify backend health
        run: |
          BACKEND_URL=$(kubectl get svc backend-api -n provocative-cloud -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f "https://${BACKEND_URL}/health" || exit 1

      - name: Deploy frontend application
        run: |
          kubectl apply -f infrastructure/kubernetes/frontend-deployment.yaml
          kubectl rollout status deployment/frontend -n provocative-cloud --timeout=30m

      - name: Verify frontend health
        run: |
          FRONTEND_URL=$(kubectl get svc frontend -n provocative-cloud -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f "https://${FRONTEND_URL}/health" || exit 1

      - name: Run smoke tests
        run: |
          python -m pytest tests/smoke/ \
            --environment production \
            --base-url https://provocative.cloud

      - name: Monitor deployment metrics
        run: |
          for i in {1..10}; do
            kubectl get --raw /apis/metrics.k8s.io/v1beta1/namespaces/provocative-cloud/pods
            sleep 30
          done

      - name: Update deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            gh deployment create --ref ${{ github.sha }} --environment production --auto-merge
            gh deployment-status create --state success --environment production
          else
            gh deployment-status create --state failure --environment production
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify_deployment:
    name: Send Deployment Notifications
    needs: deploy_applications
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'deployments'
          slack-message: |
            *Production Deployment Status*: ${{ needs.deploy_applications.result }}
            *Environment*: Production
            *Version*: ${{ github.ref }}
            *Triggered by*: ${{ github.actor }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}