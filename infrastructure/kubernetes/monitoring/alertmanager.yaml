apiVersion: v1
kind: ServiceAccount
metadata:
  name: alertmanager
  namespace: provocative-cloud
  labels:
    app: alertmanager
    component: monitoring

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-storage
  namespace: provocative-cloud
  labels:
    app: alertmanager
    component: storage
  annotations:
    backup.velero.io/backup-volumes: storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: provocative-cloud
  labels:
    app: alertmanager
    component: config
data:
  alertmanager.yml: |
    global:
      resolve_timeout: 5m
      slack_api_url: '${SLACK_API_URL}'
      smtp_smarthost: 'smtp.provocative.cloud:587'
      smtp_from: 'alertmanager@provocative.cloud'
      smtp_auth_username: '${SMTP_USERNAME}'
      smtp_auth_password: '${SMTP_PASSWORD}'
      pagerduty_url: 'https://events.pagerduty.com/v2/enqueue'

    templates:
      - '/etc/alertmanager/templates/*.tmpl'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: 'default'
      routes:
        - match:
            severity: critical
          receiver: 'pagerduty'
          continue: true
        - match:
            severity: warning
          receiver: 'slack'
          continue: true
        - match_re:
            service: ^(gpu|carbon-capture)$
          receiver: 'gpu-team'
          continue: true

    receivers:
      - name: 'default'
        email_configs:
          - to: 'alerts@provocative.cloud'
            send_resolved: true

      - name: 'pagerduty'
        pagerduty_configs:
          - service_key: '${PAGERDUTY_SERVICE_KEY}'
            send_resolved: true
            severity: '{{ .CommonLabels.severity }}'

      - name: 'slack'
        slack_configs:
          - channel: '#alerts'
            send_resolved: true
            title: '[{{ .Status | toUpper }}] {{ .CommonLabels.alertname }}'
            text: >-
              {{ range .Alerts }}
              *Alert:* {{ .Annotations.summary }}
              *Description:* {{ .Annotations.description }}
              *Severity:* {{ .Labels.severity }}
              *Service:* {{ .Labels.service }}
              {{ end }}

      - name: 'gpu-team'
        slack_configs:
          - channel: '#gpu-alerts'
            send_resolved: true
            title: '[{{ .Status | toUpper }}] GPU/Carbon Alert: {{ .CommonLabels.alertname }}'
            text: >-
              {{ range .Alerts }}
              *Alert:* {{ .Annotations.summary }}
              *GPU:* {{ .Labels.gpu_id }}
              *Metrics:* {{ .Annotations.metrics }}
              *Impact:* {{ .Annotations.impact }}
              {{ end }}
        email_configs:
          - to: 'gpu-team@provocative.cloud'
            send_resolved: true

    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'cluster', 'service']

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: alertmanager
  namespace: provocative-cloud
  labels:
    app: alertmanager
    component: monitoring
spec:
  serviceName: alertmanager
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        component: monitoring
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9093'
    spec:
      serviceAccountName: alertmanager
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - alertmanager
              topologyKey: kubernetes.io/hostname
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.25.0
          args:
            - --config.file=/etc/alertmanager/alertmanager.yml
            - --storage.path=/alertmanager
            - --cluster.listen-address=0.0.0.0:9094
            - --cluster.peer=alertmanager-0.alertmanager:9094
            - --cluster.peer=alertmanager-1.alertmanager:9094
            - --cluster.peer=alertmanager-2.alertmanager:9094
            - --data.retention=120h
          ports:
            - containerPort: 9093
              name: web
              protocol: TCP
            - containerPort: 9094
              name: cluster
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: config
              mountPath: /etc/alertmanager
            - name: storage
              mountPath: /alertmanager
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            initialDelaySeconds: 15
            timeoutSeconds: 5
      volumes:
        - name: config
          configMap:
            name: alertmanager-config
        - name: storage
          persistentVolumeClaim:
            claimName: alertmanager-storage

---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: provocative-cloud
  labels:
    app: alertmanager
    component: monitoring
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9093'
spec:
  ports:
    - port: 9093
      targetPort: 9093
      protocol: TCP
      name: web
    - port: 9094
      targetPort: 9094
      protocol: TCP
      name: cluster
  selector:
    app: alertmanager
  type: ClusterIP
  sessionAffinity: ClientIP