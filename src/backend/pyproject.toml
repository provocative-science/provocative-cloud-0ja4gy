[tool.poetry]
name = "provocative-cloud-backend"
version = "0.1.0"
description = "Backend services for Provocative Cloud GPU rental platform with integrated carbon capture monitoring"
authors = ["Provocative Cloud Team"]
license = "Proprietary"
packages = [
    { include = "api" },
    { include = "db" },
    { include = "gpu_manager" },
    { include = "infrastructure" }
]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.100.0"
uvicorn = "^0.23.0"
sqlalchemy = "^2.0.0"
nvidia-ml-py = "^12.560.30"
prometheus-client = "^0.17.0"
pydantic = "^2.0.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
asyncpg = "^0.28.0"
alembic = "^1.11.0"
redis = "^4.6.0"
httpx = "^0.24.0"
python-dotenv = "^1.0.0"
structlog = "^23.1.0"
gunicorn = "^21.2.0"
websockets = "^11.0.0"
psutil = "^5.9.0"
aiofiles = "^23.1.0"
stripe = "^5.4.0"
boto3 = "^1.28.0"
pydantic-settings = "^2.7.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
black = "^23.7.0"
mypy = "^1.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.11.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
pre-commit = "^3.3.0"
bandit = "^1.7.0"
safety = "^2.3.0"
pylint = "^2.17.0"
faker = "^19.2.0"

[build-system]
requires = ["poetry-core>=1.6.0"]
backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py310"]
include = "\\.pyi?$"
extend-exclude = "/migrations/"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--verbose --cov=api --cov=db --cov=gpu_manager --cov=infrastructure --cov-report=term-missing --cov-report=xml"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["api", "db", "gpu_manager", "infrastructure"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "C0330",  # bad-continuation
    "C0326",  # bad-whitespace
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101"]
